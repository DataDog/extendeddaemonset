// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2016-2019 Datadog, Inc.

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/datadog/extendeddaemonset/pkg/apis/datadoghq/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ExtendedNodeLister helps list ExtendedNodes.
type ExtendedNodeLister interface {
	// List lists all ExtendedNodes in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ExtendedNode, err error)
	// ExtendedNodes returns an object that can list and get ExtendedNodes.
	ExtendedNodes(namespace string) ExtendedNodeNamespaceLister
	ExtendedNodeListerExpansion
}

// extendedNodeLister implements the ExtendedNodeLister interface.
type extendedNodeLister struct {
	indexer cache.Indexer
}

// NewExtendedNodeLister returns a new ExtendedNodeLister.
func NewExtendedNodeLister(indexer cache.Indexer) ExtendedNodeLister {
	return &extendedNodeLister{indexer: indexer}
}

// List lists all ExtendedNodes in the indexer.
func (s *extendedNodeLister) List(selector labels.Selector) (ret []*v1alpha1.ExtendedNode, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ExtendedNode))
	})
	return ret, err
}

// ExtendedNodes returns an object that can list and get ExtendedNodes.
func (s *extendedNodeLister) ExtendedNodes(namespace string) ExtendedNodeNamespaceLister {
	return extendedNodeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ExtendedNodeNamespaceLister helps list and get ExtendedNodes.
type ExtendedNodeNamespaceLister interface {
	// List lists all ExtendedNodes in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ExtendedNode, err error)
	// Get retrieves the ExtendedNode from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ExtendedNode, error)
	ExtendedNodeNamespaceListerExpansion
}

// extendedNodeNamespaceLister implements the ExtendedNodeNamespaceLister
// interface.
type extendedNodeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ExtendedNodes in the indexer for a given namespace.
func (s extendedNodeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ExtendedNode, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ExtendedNode))
	})
	return ret, err
}

// Get retrieves the ExtendedNode from the indexer for a given namespace and name.
func (s extendedNodeNamespaceLister) Get(name string) (*v1alpha1.ExtendedNode, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("extendednode"), name)
	}
	return obj.(*v1alpha1.ExtendedNode), nil
}
