image: registry.ddbuild.io/images/mirror/golang:1.22
variables:
  PROJECTNAME: "extendeddaemonset"
  PROJECTNAME_CHECK: "extendeddaemonset-check"
  TARGET_TAG: v$CI_PIPELINE_ID-$CI_COMMIT_SHORT_SHA
  BUILD_DOCKER_REGISTRY: "486234852809.dkr.ecr.us-east-1.amazonaws.com/ci"
  JOB_DOCKER_IMAGE: "registry.ddbuild.io/ci-containers-project:v68399443-88dc260-v1.22"
  DOCKER_REGISTRY_LOGIN_SSM_KEY: docker_hub_login
  DOCKER_REGISTRY_PWD_SSM_KEY: docker_hub_pwd
  DOCKER_REGISTRY_URL: docker.io
  FIPS_ENABLED: false
  # This should get updated to slug of latest release by make bundle command
  CONDUCTOR_BUILD_TAG: v0-11-0-rc-2
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - /go/pkg/mod

stages:
  - build
  - test
  - image
  - release

before_script:
  - make install-tools

build:
  stage: build
  tags: [ "runner:main", "size:large" ]
  script:
    - make build

tests:
  stage: test
  tags: [ "runner:main", "size:large" ]
  script:
  - make test

generate_code:
  stage: test
  tags: [ "runner:main", "size:large" ]
  script:
  - make generate manifests
  - git diff --exit-code


build_eds_image_amd64:
  stage: image
  tags:
    - "arch:amd64"
  image: $JOB_DOCKER_IMAGE
  variables:
    GOARCH: amd64
    TARGET_IMAGE: $BUILD_DOCKER_REGISTRY/$PROJECTNAME:v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}-amd64
    RELEASE_IMAGE: $BUILD_DOCKER_REGISTRY/$PROJECTNAME:$CI_COMMIT_TAG-amd64
  before_script:
    # DockerHub login for build to limit rate limit when pulling base images
    - DOCKER_REGISTRY_LOGIN=$(aws ssm get-parameter --region us-east-1 --name ci.extendeddaemonset.$DOCKER_REGISTRY_LOGIN_SSM_KEY --with-decryption --query "Parameter.Value" --out text)
    - aws ssm get-parameter --region us-east-1 --name ci.extendeddaemonset.$DOCKER_REGISTRY_PWD_SSM_KEY --with-decryption --query "Parameter.Value" --out text | docker login --username "$DOCKER_REGISTRY_LOGIN" --password-stdin "$DOCKER_REGISTRY_URL"
  script:
    - IMG=$TARGET_IMAGE FIPS_ENABLED=$FIPS_ENABLED make docker-build-push-ci
    - if [ -n "$CI_COMMIT_TAG" ]; then docker buildx imagetools create $TARGET_IMAGE --tag $RELEASE_IMAGE; fi

build_eds_image_amd64-fips:
  extends: build_eds_image_amd64
  variables:
    TARGET_IMAGE: $BUILD_DOCKER_REGISTRY/$PROJECTNAME:v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}-fips-amd64
    RELEASE_IMAGE: $BUILD_DOCKER_REGISTRY/$PROJECTNAME:$CI_COMMIT_TAG-fips-amd64
    FIPS_ENABLED: "true"

build_eds_image_arm64:
  stage: image
  tags:
    - "arch:arm64"
  image: $JOB_DOCKER_IMAGE
  variables:
    GOARCH: arm64
    TARGET_IMAGE: $BUILD_DOCKER_REGISTRY/$PROJECTNAME:v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}-arm64
    RELEASE_IMAGE: $BUILD_DOCKER_REGISTRY/$PROJECTNAME:$CI_COMMIT_TAG-arm64
  before_script:
    # DockerHub login for build to limit rate limit when pulling base images
    - DOCKER_REGISTRY_LOGIN=$(aws ssm get-parameter --region us-east-1 --name ci.extendeddaemonset.$DOCKER_REGISTRY_LOGIN_SSM_KEY --with-decryption --query "Parameter.Value" --out text)
    - aws ssm get-parameter --region us-east-1 --name ci.extendeddaemonset.$DOCKER_REGISTRY_PWD_SSM_KEY --with-decryption --query "Parameter.Value" --out text | docker login --username "$DOCKER_REGISTRY_LOGIN" --password-stdin "$DOCKER_REGISTRY_URL"
  script:
    - IMG=$TARGET_IMAGE FIPS_ENABLED=$FIPS_ENABLED make docker-build-push-ci
    - if [ -n "$CI_COMMIT_TAG" ]; then docker buildx imagetools create $TARGET_IMAGE --tag $RELEASE_IMAGE; fi

build_eds_image_arm64-fips:
  extends: build_eds_image_arm64
  variables:
    TARGET_IMAGE: $BUILD_DOCKER_REGISTRY/$PROJECTNAME:v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}-fips-arm64
    RELEASE_IMAGE: $BUILD_DOCKER_REGISTRY/$PROJECTNAME:$CI_COMMIT_TAG-fips-arm64
    FIPS_ENABLED: "true"

build_eds_check_image_amd64:
  stage: image
  tags:
    - "arch:amd64"
  image: $JOB_DOCKER_IMAGE
  variables:
    GOARCH: amd64
    TARGET_IMAGE: $BUILD_DOCKER_REGISTRY/$PROJECTNAME_CHECK:v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}-amd64
    RELEASE_IMAGE: $BUILD_DOCKER_REGISTRY/$PROJECTNAME_CHECK:$CI_COMMIT_TAG-amd64
  before_script:
    # DockerHub login for build to limit rate limit when pulling base images
    - DOCKER_REGISTRY_LOGIN=$(aws ssm get-parameter --region us-east-1 --name ci.extendeddaemonset.$DOCKER_REGISTRY_LOGIN_SSM_KEY --with-decryption --query "Parameter.Value" --out text)
    - aws ssm get-parameter --region us-east-1 --name ci.extendeddaemonset.$DOCKER_REGISTRY_PWD_SSM_KEY --with-decryption --query "Parameter.Value" --out text | docker login --username "$DOCKER_REGISTRY_LOGIN" --password-stdin "$DOCKER_REGISTRY_URL"
  script:
    - IMG_CHECK=$TARGET_IMAGE make docker-build-push-check-ci
    - if [ -n "$CI_COMMIT_TAG" ]; then docker buildx imagetools create $TARGET_IMAGE --tag $RELEASE_IMAGE; fi

build_eds_check_image_arm64:
  stage: image
  tags:
    - "arch:arm64"
  image: $JOB_DOCKER_IMAGE
  variables:
    GOARCH: arm64
    TARGET_IMAGE: $BUILD_DOCKER_REGISTRY/$PROJECTNAME_CHECK:v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}-arm64
    RELEASE_IMAGE: $BUILD_DOCKER_REGISTRY/$PROJECTNAME_CHECK:$CI_COMMIT_TAG-arm64
  before_script:
    # DockerHub login for build to limit rate limit when pulling base images
    - DOCKER_REGISTRY_LOGIN=$(aws ssm get-parameter --region us-east-1 --name ci.extendeddaemonset.$DOCKER_REGISTRY_LOGIN_SSM_KEY --with-decryption --query "Parameter.Value" --out text)
    - aws ssm get-parameter --region us-east-1 --name ci.extendeddaemonset.$DOCKER_REGISTRY_PWD_SSM_KEY --with-decryption --query "Parameter.Value" --out text | docker login --username "$DOCKER_REGISTRY_LOGIN" --password-stdin "$DOCKER_REGISTRY_URL"
  script:
    - IMG_CHECK=$TARGET_IMAGE make docker-build-push-check-ci
    - if [ -n "$CI_COMMIT_TAG" ]; then docker buildx imagetools create $TARGET_IMAGE --tag $RELEASE_IMAGE; fi


publish_public_main:
  stage: release
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: on_success
    - when: never
  needs:
    - build_eds_image_arm64
    - build_eds_image_amd64
  trigger:
    project: DataDog/public-images
    branch: main
    strategy: depend
  variables:
    IMG_SOURCES: $BUILD_DOCKER_REGISTRY/$PROJECTNAME:v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}-amd64,$BUILD_DOCKER_REGISTRY/$PROJECTNAME:v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}-arm64
    IMG_DESTINATIONS: $PROJECTNAME:main
    IMG_SIGNING: "false"

publish_public_main-fips:
  extends: publish_public_main
  variables:
    IMG_SOURCES: $BUILD_DOCKER_REGISTRY/$PROJECTNAME:v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}-fips-amd64,$BUILD_DOCKER_REGISTRY/$PROJECTNAME:v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}-fips-arm64
    IMG_DESTINATIONS: $PROJECTNAME:main-fips

publish_public_tag:
  stage: release
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
    - when: never
  needs:
    - build_eds_image_arm64
    - build_eds_image_amd64
  trigger:
    project: DataDog/public-images
    branch: main
    strategy: depend
  variables:
    IMG_SOURCES: $BUILD_DOCKER_REGISTRY/$PROJECTNAME:$CI_COMMIT_TAG-amd64,$BUILD_DOCKER_REGISTRY/$PROJECTNAME:$CI_COMMIT_TAG-arm64
    IMG_DESTINATIONS: $PROJECTNAME:$CI_COMMIT_TAG
    IMG_SIGNING: "false"

publish_public_tag-fips:
  extends: publish_public_tag
  variables:
    IMG_SOURCES: $BUILD_DOCKER_REGISTRY/$PROJECTNAME:$CI_COMMIT_TAG-fips-amd64,$BUILD_DOCKER_REGISTRY/$PROJECTNAME:$CI_COMMIT_TAG-arm64
    IMG_DESTINATIONS: $PROJECTNAME:$CI_COMMIT_TAG-fips

publish_public_latest:
  stage: release
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
    - when: never
  needs:
    - build_eds_image_arm64
    - build_eds_image_amd64
  trigger:
    project: DataDog/public-images
    branch: main
    strategy: depend
  variables:
    IMG_SOURCES: $BUILD_DOCKER_REGISTRY/$PROJECTNAME:$CI_COMMIT_TAG-amd64,$BUILD_DOCKER_REGISTRY/$PROJECTNAME:$CI_COMMIT_TAG-arm64
    IMG_DESTINATIONS: $PROJECTNAME:latest
    IMG_SIGNING: "false"

trigger_internal_eds_image:
  stage: release
  rules:
    - if: $CI_COMMIT_TAG
    - when: never
  needs:
    - build_eds_image_arm64
    - build_eds_image_amd64
  trigger:
    project: DataDog/images
    branch: master
    strategy: depend
  variables:
    IMAGE_VERSION: tmpl-v3
    IMAGE_NAME: $PROJECTNAME
    RELEASE_TAG: ${CI_COMMIT_REF_SLUG}
    BUILD_TAG: ${CI_COMMIT_REF_SLUG}
    TMPL_SRC_IMAGE: v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}
    RELEASE_STAGING: "true"
    RELEASE_PROD: "true"

trigger_internal_eds_image_fips:
  stage: release
  rules:
    - if: $CI_COMMIT_TAG
    - when: never
  needs:
    - build_eds_image_arm64
    - build_eds_image_amd64
  trigger:
    project: DataDog/images
    branch: master
    strategy: depend
  variables:
    IMAGE_VERSION: tmpl-v3-fips
    IMAGE_NAME: $PROJECTNAME
    RELEASE_TAG: ${CI_COMMIT_REF_SLUG}-fips
    BUILD_TAG: ${CI_COMMIT_REF_SLUG}-fips
    TMPL_SRC_IMAGE: v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}-fips
    RELEASE_STAGING: "true"
    RELEASE_PROD: "true"

trigger_internal_eds_image_conductor:
  stage: release
  rules:
    - if: '$DDR == "true"'
    - when: never
  needs:
    - build_eds_image_arm64
    - build_eds_image_amd64
  trigger:
    project: DataDog/images
    branch: master
    strategy: depend
  variables:
    IMAGE_VERSION: tmpl-v3
    IMAGE_NAME: $PROJECTNAME
    RELEASE_TAG: ${CONDUCTOR_BUILD_TAG}
    BUILD_TAG: ${CONDUCTOR_BUILD_TAG}
    TMPL_SRC_IMAGE: v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}
    RELEASE_STAGING: "true"
    # Temporary
    RELEASE_PROD: "false"


trigger_internal_eds_check_image:
  stage: release
  rules:
    - if: $CI_COMMIT_TAG
    - when: never
  needs:
    - build_eds_check_image_arm64
    - build_eds_check_image_amd64
  trigger:
    project: DataDog/images
    branch: master
    strategy: depend
  variables:
    IMAGE_VERSION: tmpl-v3
    IMAGE_NAME: $PROJECTNAME_CHECK
    RELEASE_TAG: ${CI_COMMIT_REF_SLUG}
    BUILD_TAG: ${CI_COMMIT_REF_SLUG}
    TMPL_SRC_IMAGE: v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}
    RELEASE_STAGING: "true"
    RELEASE_PROD: "true"

trigger_internal_eds_check_image_conductor:
  stage: release
  rules:
    - if: '$DDR == "true"'
    - when: never
  needs:
    - build_eds_check_image_arm64
    - build_eds_check_image_amd64
  trigger:
    project: DataDog/images
    branch: master
    strategy: depend
  variables:
    IMAGE_VERSION: tmpl-v3
    IMAGE_NAME: $PROJECTNAME_CHECK
    RELEASE_TAG: ${CONDUCTOR_BUILD_TAG}
    BUILD_TAG: ${CONDUCTOR_BUILD_TAG}
    TMPL_SRC_IMAGE: v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}
    RELEASE_STAGING: "true"
    # Temporary
    RELEASE_PROD: "false"
